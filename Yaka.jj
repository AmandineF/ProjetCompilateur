/*
 *
 *      Frank Chassing
 *	Baptiste
 * 	Mathilde Leparquier
 *	Amandine Fouillet
 *     
 *	Projet compilateur 2014
 */


options{
	JDK_VERSION="1.5";	
}

PARSER_BEGIN(Yaka)

import java.io.*;

public class Yaka {
	


  public static Declaration declaration = new Declaration();
  public static TabIdent tabIdent = new TabIdent(50);
  public static Expression expression = new Expression();
  private static java.io.OutputStream out = System.out;
  public static YVM yvm = new YVMasm();

  public static void main(String args[]) { 
    Yaka analyseur;
    java.io.InputStream input;

    if (args.length==1) {
      System.out.print(args[args.length-1] + ": ");
      try {
        input = new java.io.FileInputStream(args[args.length-1]+".yaka");
	out = new FileOutputStream(args[args.length-1]+".asm");
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Fichier introuvable.");
        return;
      }
    } else if (args.length==0) {
      try{
      input = new java.io.FileInputStream("essai.txt");
      out =new java.io.FileOutputStream("essai.asm");
      //System.out.println("Lecture sur l'entree standard...");
      //input = System.in;
      }catch (java.io.FileNotFoundException e) {
      	      System.out.println("Fichier introuvable -> Lecture sur l'entree standard...");
      	      input = System.in;
      }

    } else {
      System.out.println("Usage: java Gram [fichier]");
      return;
    }
    try {
      analyseur = new Yaka(input);
      analyseur.prog();
      Ecriture.ecrireString(out, yvm.genere());
      System.out.println("analyse syntaxique reussie!");
    } catch (ParseException e) {
      String msg = e.getMessage();
      msg = msg.substring(0,msg.indexOf("\n"));
      System.out.println("\n\nfin\n\n");
      tabIdent.show();
      //System.out.println(out+"\n\n");
      //System.out.println(yvm.genere());
      Ecriture.ecrireString(out, yvm.genere());
      System.out.println("Erreur de syntaxe : "+msg);
    }
  } 
}

PARSER_END(Yaka)
/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/

TOKEN_MGR_DECLS :
{public static String identLu,chaineLue;
 public static int entierLu;}

/*** Skip whitespace and comments ***/
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "(*"   : IN_COMMENT
}
<IN_COMMENT> MORE:
{
  < ~[] >
}
<IN_COMMENT> SKIP:
{
   < "*)" >  {SwitchTo(DEFAULT);} 
}


/* Mots réservés*/

TOKEN :
{
  < BOOLEEN: "BOOLEEN" >
| < VAR: "VAR" >
| < FAIRE: "FAIRE" >
| < SINON: "SINON" >
| < POUR: "POUR" >
| < SI: "SI" >
| < FSI: "FSI">
| < ENTIER: "ENTIER" >
| < RETOURNE: "RETOURNE" >
| < VRAI: "VRAI" >
| < TANTQUE: "TANTQUE" >
| <CONST : "CONST">
| <FAUX : "FAUX">
| <FAIT : "FAIT">
| <OU : "OU">
| <ET : "ET">
| <NON : "NON">
| <FONCTION : "FONCTION">
| <FFONCTION  : "FFONCTION">
| <PROGRAMME : "PROGRAMME" >
| <FPROGRAMME : "FPROGRAMME" >
| <PRINCIPAL : "PRINCIPAL">
| <FPRINCIPAL : "FPRINCIPAL">
| <ALORS : "ALORS">
| <ECRIRE : "ECRIRE">
| <LIRE : "LIRE">
| <ALALIGNE : "ALALIGNE">

}



/*** unites de base nombres, idents,  strings ***/
TOKEN  :
{
  < #chiffre : ["0"-"9"] >
| < entier : (<chiffre>)+ > 
	{ entierLu = Integer.parseInt(image.toString());
        }
| < #lettre: ["A"-"Z","a"-"z"] >
| < ident : <lettre> (<lettre> | <chiffre>)* >
	{identLu =image.toString();	
	}
| < chaine : "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >
	{ chaineLue = image.toString();
	 }
}


/**************************************/
/********debut de la grammaire ********/
/**************************************/
void prog() : {}
{
   <PROGRAMME>  <ident> {yvm.entete();}	
   (declFonction())* /*Nouveau*/
   <PRINCIPAL> /*Nouveau*/
   bloc(){/*System.out.println("\n\nfin bloc\n\n");tabIdent.show();*/}
   <FPRINCIPAL>  /*Nouveau*/
   <FPROGRAMME> {yvm.queue();}
   
}

void declFonction() : {}{
type() 
<FONCTION> <ident> {declaration.stockerIdent();declaration.sauvRetourFonction();}	
paramForms() {declaration.remplirTableauGlobaux();/*System.out.println("\n\nfin declaration");tabIdent.show();*/}
bloc()
<FFONCTION>
}

void paramForms() : {}{
"("(paramForm()("," paramForm())*)?")"
}
void paramForm() : {}{
type() {declaration.stockerTypeParam();} <ident>{declaration.stockerParam();}
}
void bloc() : {}{
 (declConst())*
 (declVar())*		
   suiteInstr() 
}

void declConst() : {}
{
  <CONST>  defConst() ( "," defConst())* ";"
}

void defConst() : {}
{
	
  <ident>         {declaration.stockerIdent();}	
   "=" valConst() {declaration.remplirTableauConst();}
  
}

void valConst() : {}{
  <entier> {declaration.stockerEntier(YakaTokenManager.entierLu);
 	    declaration.stockerType("entier"); }		
 | <ident> {declaration.stockerEntier(tabIdent.chercheIdent(YakaTokenManager.identLu).getValue());
 	    declaration.stockerType(tabIdent.chercheIdent(YakaTokenManager.identLu).getType());}				
 | <VRAI>  {declaration.stockerEntier(-1);
 	    declaration.stockerType("booleen");}				
 | <FAUX>  {declaration.stockerEntier(0);
 	    declaration.stockerType("booleen");}				
}


void declVar() : {}
{
  <VAR>   {declaration.calculerOffset();} type() 	
  <ident> {declaration.stockerIdent();
  	   declaration.remplirTableauVar();}				
  ("," {yvm.incVar();}
      <ident>  {declaration.calculerOffset();
      	        declaration.stockerIdent();
      	        declaration.remplirTableauVar();}	
  )* ";"
{yvm.ouvrePrinc();}	
}

void type() :{}
{
   <ENTIER>  {declaration.stockerType("entier");}		
 | <BOOLEEN> {declaration.stockerType("booleen");}
}
/*
 * Syntaxe des instructions.
 */
void suiteExpr() : {}
{expression() (";" (expression())? )*}

void suiteInstr() :{}
{
        instruction()(";"(instruction())?)*
}

void instruction() :{}
{
        affectation()
        |lecture()
        |ecriture()
        |iteration()
        |conditionnelle()
        |retourne()
}

void affectation() :{}
{
        <ident> {declaration.stockerIdent(); yvm.offsetStore();} "=" expression() {yvm.iStore();}
}

void lecture() :{}
{
        <LIRE> "(" <ident> {declaration.stockerIdent(); yvm.lireEnt();}")"
}

void ecriture() :{}
{
        (<ECRIRE> "(" 
        (expression() {yvm.ecrireEnt();}
        | <chaine> {yvm.ecrireChaine();}) ")")
        | <ALALIGNE> {yvm.aLaLigne();}
}

/*
 * Expression .
 */
void expression() : {}
{
  simpleExpr() 
  ((opRel() 
  simpleExpr()
  ){yvm.afficherCompare();})?
}


void simpleExpr() : {}
{
   terme() 
   ((opAdd()
   terme()	
   ){yvm.afficherOperateurAdd();})* 
} 
void terme() : {}
{
  facteur() 
  ((opMul()
  facteur()	
  ){yvm.afficherOperateurMul();})*
}
void facteur() : {}
{   primaire() 
  |  opNeg() primaire() {yvm.afficherNeg();}
}

void primaire(): {}
{
   valeur() 
 | "(" expression() ")" 
 
}

void valeur() : {}
{ <entier> {yvm.iConst(); expression.ajoutType("ENTIER"); yvm.stop(expression.typage());}		
 | <ident>(argumentsFonction())?  {yvm.charger(tabIdent.chercheIdent(YakaTokenManager.identLu));  expression.ajoutType(tabIdent.getTypeIdent(YakaTokenManager.identLu));yvm.stop(expression.typage());}				
 | <VRAI> {yvm.iConst(); expression.ajoutType("BOOLEEN");yvm.stop(expression.typage());}		
 | <FAUX> {yvm.iConst(); expression.ajoutType("BOOLEEN");yvm.stop(expression.typage());}	
 
}

void opRel() : {}
{
   "="{expression.ajoutOp("="); yvm.stockerEgal();} 		
 | "<>" {expression.ajoutOp("<>"); yvm.stockerDiff();} 	
 | "<" {expression.ajoutOp("<"); yvm.stockerInfStrict();} 		
 | "<=" {expression.ajoutOp("<="); yvm.stockerInfEgal();} 	
 | ">" 	{expression.ajoutOp(">"); yvm.stockerSupStrict();} 	
 | ">=" {expression.ajoutOp(">="); yvm.stockerSupEgal();} 	
 	
}

void opAdd() : {}
{
    "+"	{yvm.stockerPlus(); expression.ajoutOp("+");}
  |  "-" {yvm.stockerMoins(); expression.ajoutOp("-");}
  | <OU> {yvm.stockerOu(); expression.ajoutOp("ou");}	
}

void opMul() : {}
{
  "*"	{yvm.stockerMul(); expression.ajoutOp("*");}	
  | "/"	{yvm.stockerDiv(); expression.ajoutOp("/");}
  | <ET>{yvm.stockerAnd(); expression.ajoutOp("et");}
} 

void opNeg() : {}
{ "-" 	{yvm.stockerOppose(); expression.ajoutOp("neg");}	
 | <NON>{yvm.stockerNeg(); expression.ajoutOp("non");}	
}

/*Itération*/

void iteration() : {}
{
	<TANTQUE> {yvm.faire();}
	expression() {yvm.iter();}
	<FAIRE> 
	suiteInstr()
	<FAIT> {yvm.fait();}
}

/*Conditionnelle*/
void conditionnelle() : {}
{
	<SI> {yvm.numCond();}
	expression() {yvm.cond();}
	<ALORS>
	instruction() {yvm.sinon();}
	(<SINON>
	instruction())?
	<FSI> {yvm.fsi();}
}

/*Fonctions*/
void retourne() : {} {
	<RETOURNE> 
	expression()
}
void argumentsFonction() : {} {
	"(" (expression() ("," expression())*)? ")"
}


