/*
 *
 *      Frank Chassing
 *	Baptiste
 * 	Mathilde Leparquier
 *	Amandine Fouillet
 *     
 *	Projet compilateur 2014
 */


options{
	JDK_VERSION="1.5";	
}

PARSER_BEGIN(Yaka)



public class Yaka {
  public static TabIdent tabIdent=new TabIdent(30);
  public static IdConst idConst1;
  public static IdVar idVar1;
  public static IdVar idVar2;
  /*public Declaration declaration;*/
  /*public Expression expression;*/
  public static YVM yvm;

  public static void main(String args[]) { 
    Yaka analyseur;
    java.io.InputStream input;

    if (args.length==1) {
      System.out.print(args[args.length-1] + ": ");
      try {
        input = new java.io.FileInputStream(args[args.length-1]+".yaka");
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Fichier introuvable.");
        return;
      }
    } else if (args.length==0) {
      System.out.println("Lecture sur l'entree standard...");
      input = System.in;
    } else {
      System.out.println("Usage: java Gram [fichier]");
      return;
    }
    try {
      analyseur = new Yaka(input);
      analyseur.prog();
      System.out.println("analyse syntaxique reussie!");
    } catch (ParseException e) {
      String msg = e.getMessage();
      msg = msg.substring(0,msg.indexOf("\n"));
      System.out.println("Erreur de syntaxe : "+msg);
    }
  } 
}

PARSER_END(Yaka)
/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/

TOKEN_MGR_DECLS :
{public static String identLu,chaineLue,identAStocker, typeAStocker;
 public static int entierLu, entierAStocker, offset;}

/*** Skip whitespace and comments ***/
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "(*"   : IN_COMMENT
}
<IN_COMMENT> MORE:
{
  < ~[] >
}
<IN_COMMENT> SKIP:
{
   < "*)" >  {SwitchTo(DEFAULT);} 
}


/* Mots réservés*/

TOKEN :
{
  < BOOLEEN: "BOOLEEN" >
| < VAR: "VAR" >
| < FAIRE: "FAIRE" >
| < SINON: "SINON" >
| < POUR: "POUR" >
| < SI: "SI" >
| < FSI: "FSI">
| < ENTIER: "ENTIER" >
| < RETOURNE: "RETOURNE" >
| < VRAI: "VRAI" >
| < TANTQUE: "TANTQUE" >
| <CONST : "CONST">
| <FAUX : "FAUX">
| <FAIT : "FAIT">
| <OU : "OU">
| <ET : "ET">
| <NON : "NON">
| <FONCTION : "FONCTION">
| <FFONCTION  : "FFONCTION">
| <PROGRAMME : "PROGRAMME" >
| <FPROGRAMME : "FPROGRAMME" >
| <PRINCIPAL : "PRINCIPAL">
| <FPRINCIPAL : "FPRINCIPAL">
| <ALORS : "ALORS">
| <ECRIRE : "ECRIRE">
| <LIRE : "LIRE">
| <ALALIGNE : "ALALIGNE">

}



/*** unites de base nombres, idents,  strings ***/
TOKEN  :
{
  < #chiffre : ["0"-"9"] >
| < entier : (<chiffre>)+ > 
	{ entierLu = Integer.parseInt(image.toString());
        }
| < #lettre: ["A"-"Z","a"-"z"] >
| < ident : <lettre> (<lettre> | <chiffre>)* >
	{identLu =image.toString();	
	}
| < chaine : "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >
	{ chaineLue = image.toString();
	 }
}


/**************************************/
/********debut de la grammaire ********/
/**************************************/
void prog() : {}
{
   <PROGRAMME> <ident>	
   bloc(){tabIdent.show();}
   <FPROGRAMME> 
   
}

void bloc() : {}{
 (declConst())*
 (declVar())*		
   suiteExpr() 
}

void declConst() : {}
{
  <CONST>  defConst() ( "," defConst())* ";"
}

void defConst() : {}
{
	
  <ident>  {YakaTokenManager.identAStocker = YakaTokenManager.identLu;}	
   "=" valConst() 
   {	   idConst1 = new IdConst(YakaTokenManager.typeAStocker,YakaTokenManager.entierAStocker);	
   	   tabIdent.rangeIdent(YakaTokenManager.identAStocker, idConst1);
    }
  
}

void valConst() : {}{
  <entier> {YakaTokenManager.entierAStocker = YakaTokenManager.entierLu;
 	    YakaTokenManager.typeAStocker = "entier"; }		
 | <ident> {YakaTokenManager.entierAStocker = tabIdent.chercheIdent(YakaTokenManager.identLu).getValue();
 	    YakaTokenManager.typeAStocker = tabIdent.chercheIdent(YakaTokenManager.identLu).getType();}				
 | <VRAI>  {YakaTokenManager.entierAStocker = -1;
 	    YakaTokenManager.typeAStocker = "booleen";}				
 | <FAUX>  {YakaTokenManager.entierAStocker = 0;
            YakaTokenManager.typeAStocker = "booleen";}				
}


void declVar() : {}
{
  <VAR> {YakaTokenManager.offset = YakaTokenManager.offset-2;} type() 	
  <ident> {YakaTokenManager.identAStocker = YakaTokenManager.identLu;
  	  idVar1 = new IdVar(YakaTokenManager.typeAStocker,YakaTokenManager.offset);
  	   tabIdent.rangeIdent(YakaTokenManager.identAStocker, idVar1 );
  	  }				
  ("," 
      <ident>  {YakaTokenManager.offset = YakaTokenManager.offset -2;
      	        YakaTokenManager.identAStocker = YakaTokenManager.identLu;
      	        idVar2 =  new IdVar(YakaTokenManager.typeAStocker,YakaTokenManager.offset);
  	   	tabIdent.rangeIdent(YakaTokenManager.identAStocker,idVar2);
       		}	
  )* ";"
	
}

void type() :{}
{
   <ENTIER> {YakaTokenManager.typeAStocker = "entier";}		
 | <BOOLEEN> {YakaTokenManager.typeAStocker = "booleen";}
}
/*
 * Syntaxe des instructions.
 */
void suiteExpr() : {}
{expression() (";" (expression())? )*}



/*
 * Expression .
 */
void expression() : {}
{
  simpleExpr() 
  (opRel() 
  simpleExpr() 
  )?
}



void simpleExpr() : {}
{
   terme() 
   (opAdd() 
   terme()	
   )*
} 
void terme() : {}
{
  facteur() 
  (opMul() 
  facteur()	
  )*
}
void facteur() : {}
{   primaire() 
  |  opNeg() primaire() 
}

void primaire (): {}
{
   valeur()
 | "(" expression() ")" 
 
}

void valeur () : {}
{ <entier> 		
 | <ident> 		
 | <VRAI> 		
 | <FAUX> 		
 
}

void opRel() : {}
{
   "=" 		
 | "<>" 	
 | "<" 		
 | "<=" 	
 | ">" 		
 | ">=" 	
} 

void opAdd() : {}
{
    "+"		
  |  "-"  
  | <OU> 	
}

void opMul() : {}
{
  "*"		
  | "/"		
  | <ET>	
} 

void opNeg() : {}
{ "-" 		
 | <NON>	
}


